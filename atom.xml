<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YiShao&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://dongjiang1989.github.io/"/>
  <updated>2020-01-19T07:34:07.631Z</updated>
  <id>https://dongjiang1989.github.io/</id>
  
  <author>
    <name>dongjiang1899</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CNI (二)</title>
    <link href="https://dongjiang1989.github.io/2020/01/19/CNI1/"/>
    <id>https://dongjiang1989.github.io/2020/01/19/CNI1/</id>
    <published>2020-01-19T06:59:21.000Z</published>
    <updated>2020-01-19T07:34:07.631Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CNI（第二篇）"><a href="#CNI（第二篇）" class="headerlink" title="CNI（第二篇）"></a>CNI（第二篇）</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>CNI（容器网络接口）是一个规范SPEC。 如何配置调用： 请查看<a href="https://github.com/containernetworking/cni/blob/master/SPEC.md" target="_blank" rel="noopener">CNI SPEC</a></p><p>CNI包括几部分： </p><blockquote><p>golang SDK Lib, 用于集成实现网络通信接口；</p></blockquote><blockquote><p>Template，用于生成自定义的CNI插件，标准代码工程；</p></blockquote><blockquote><p>标准Document，包括社区公约、描述、roadmaps、milestone等</p></blockquote><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><h3 id="cnitool-介绍"><a href="#cnitool-介绍" class="headerlink" title="cnitool 介绍"></a>cnitool 介绍</h3><p>cnitool是将已经编译完成的的容器网络插件Adapter，添加到VM中或者PM中。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">EnvCNIPath        = <span class="string">"CNI_PATH"</span>   <span class="comment">//CNI Adapter bin文件路径（bin的编译需要去掉cgo）</span></span><br><span class="line">EnvNetDir         = <span class="string">"NETCONFPATH"</span>  <span class="comment">//部署（添加、删除、检查）adapter需要的json配置文件路径</span></span><br><span class="line">EnvCapabilityArgs = <span class="string">"CAP_ARGS"</span>  <span class="comment">// CAP 参数</span></span><br><span class="line">EnvCNIArgs        = <span class="string">"CNI_ARGS"</span>  <span class="comment">// adapter 外部传递的参数，一般不用，将args放在json文件中</span></span><br><span class="line">EnvCNIIfname      = <span class="string">"CNI_IFNAME"</span>  <span class="comment">// 设置的容器网卡名称，如eth0</span></span><br><span class="line"></span><br><span class="line">DefaultNetDir = <span class="string">"/etc/cni/net.d"</span> <span class="comment">// 默认CNI 插件路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下部分是 插件 添加方式</span></span><br><span class="line">CmdAdd   = <span class="string">"add"</span></span><br><span class="line">CmdCheck = <span class="string">"check"</span></span><br><span class="line">CmdDel   = <span class="string">"del"</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="插件使用"><a href="#插件使用" class="headerlink" title="插件使用"></a>插件使用</h3><p>准备二进制插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go get github.com/containernetworking/plugins</span><br><span class="line">go build ptp -o myptp</span><br></pre></td></tr></table></figure><p>准备网络配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> `</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"cniVersion"</span>: <span class="string">"0.4.0"</span>,</span><br><span class="line"><span class="string">"name"</span>: <span class="string">"myptp"</span>,</span><br><span class="line"><span class="string">"type"</span>: <span class="string">"ptp"</span>,  //veth pair</span><br><span class="line"><span class="string">"ipMasq"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">"ipam"</span>: &#123;</span><br><span class="line"><span class="string">"type"</span>: <span class="string">"host-local"</span>,</span><br><span class="line"><span class="string">"subnet"</span>: <span class="string">"172.16.29.0/24"</span>,</span><br><span class="line"><span class="string">"routes"</span>: [&#123;</span><br><span class="line"><span class="string">"dst"</span>: <span class="string">"0.0.0.0/0"</span></span><br><span class="line">&#125;]</span><br><span class="line">&#125;</span><br><span class="line">&#125;` &gt; /etc/cni/net.d/myptp.conflist</span><br></pre></td></tr></table></figure><p>准备好配置后部署容器网络：</p><p>第一步：创建网络Namespace， 添加名称为mytest_network</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ip netns add mytest_network</span><br></pre></td></tr></table></figure><p>第二步：添加容器网络myptp</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo CNI_PATH=/etc/cni/net.d/ cnitool add myptp /var/run/netns/mytest_network</span><br></pre></td></tr></table></figure><p>第三步：调测网络</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ip -n mytest_network addr</span><br><span class="line">sudo ip netns <span class="built_in">exec</span> mytest_network ping -c 1 4.2.2.2</span><br></pre></td></tr></table></figure><p>最后，清理网络</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo CNI_PATH=./etc/cni/net.d/ cnitool del myptp /var/run/netns/mytest_network</span><br><span class="line">sudo ip netns del mytest_network</span><br></pre></td></tr></table></figure><h3 id="cnitool调用插件"><a href="#cnitool调用插件" class="headerlink" title="cnitool调用插件"></a>cnitool调用插件</h3><p>正如上面的例子：<code>cnitool add myptp /var/run/netns/mytest_network</code></p><blockquote><p>参数0是cnitool工具名称<br>参数1是操作名称（add、del、check）<br>参数3是加载的配置对象 <code>myptp.*</code> 文件对象<br>参数4是 net namespace 名称</p></blockquote><p>解析过程：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">...</span><br><span class="line"><span class="string">"github.com/containernetworking/cni/libcni"</span>  <span class="comment">// golang lib SDK</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(os.Args) &lt; <span class="number">4</span> &#123;  <span class="comment">// 判断参数</span></span><br><span class="line">usage()</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">netdir := os.Getenv(EnvNetDir)  <span class="comment">//加载conf文件地址</span></span><br><span class="line"><span class="keyword">if</span> netdir == <span class="string">""</span> &#123;</span><br><span class="line">netdir = DefaultNetDir</span><br><span class="line">&#125;</span><br><span class="line">netconf, err := libcni.LoadConfList(netdir, os.Args[<span class="number">2</span>])</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">exit(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">... </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ifName, ok := os.LookupEnv(EnvCNIIfname) <span class="comment">// 加载网卡</span></span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line">ifName = <span class="string">"eth0"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">netns := os.Args[<span class="number">3</span>]    <span class="comment">//获得 new working namespace</span></span><br><span class="line">netns, err = filepath.Abs(netns)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">exit(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// CNI runtime object</span></span><br><span class="line">cninet := libcni.NewCNIConfig(filepath.SplitList(os.Getenv(EnvCNIPath)), <span class="literal">nil</span>)</span><br><span class="line">rt := &amp;libcni.RuntimeConf&#123;</span><br><span class="line">ContainerID:    fmt.Sprintf(<span class="string">"cnitool-%x"</span>, ha512.Sum512([]<span class="keyword">byte</span>(netns))[:<span class="number">10</span>]),</span><br><span class="line">NetNS:          netns,</span><br><span class="line">IfName:         ifName,</span><br><span class="line">Args:           cniArgs,</span><br><span class="line">CapabilityArgs: capabilityArgs,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// CNI 具体执行方式</span></span><br><span class="line"><span class="keyword">switch</span> os.Args[<span class="number">1</span>] &#123;</span><br><span class="line"><span class="keyword">case</span> CmdAdd:</span><br><span class="line">result, err := cninet.AddNetworkList(context.TODO(), netconf, rt)</span><br><span class="line"><span class="keyword">if</span> result != <span class="literal">nil</span> &#123;</span><br><span class="line">_ = result.Print()</span><br><span class="line">&#125;</span><br><span class="line">exit(err)</span><br><span class="line"><span class="keyword">case</span> CmdCheck:</span><br><span class="line">err := cninet.CheckNetworkList(context.TODO(), netconf, rt)</span><br><span class="line">exit(err)</span><br><span class="line"><span class="keyword">case</span> CmdDel:</span><br><span class="line">exit(cninet.DelNetworkList(context.TODO(), netconf, rt))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Golang-libcni-SDK"><a href="#Golang-libcni-SDK" class="headerlink" title="Golang libcni SDK"></a>Golang libcni SDK</h2><p>SDK核心的interface 接口定义：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>(</span><br><span class="line"><span class="string">"github.com/containernetworking/cni/pkg/invoke"</span> <span class="comment">//syscall 具体调用</span></span><br><span class="line"><span class="string">"github.com/containernetworking/cni/pkg/types"</span> <span class="comment">// 网络adapter管理，使用Plugin Chains模型进行关联</span></span><br><span class="line"><span class="string">"github.com/containernetworking/cni/pkg/utils"</span> <span class="comment">// 公共方法：cni conf file中各个字段ValidCheck</span></span><br><span class="line"><span class="string">"github.com/containernetworking/cni/pkg/version"</span> <span class="comment">// version compare相关: 0.2.x以下版本兼容；0.3.x 和 现在的0.4.x 版本兼容</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">type</span> CNI <span class="keyword">interface</span> &#123;</span><br><span class="line">AddNetworkList(ctx context.Context, net *NetworkConfigList, rt *RuntimeConf) (types.Result, error)</span><br><span class="line">CheckNetworkList(ctx context.Context, net *NetworkConfigList, rt *RuntimeConf) error</span><br><span class="line">DelNetworkList(ctx context.Context, net *NetworkConfigList, rt *RuntimeConf) error</span><br><span class="line">GetNetworkListCachedResult(net *NetworkConfigList, rt *RuntimeConf) (types.Result, error)</span><br><span class="line">GetNetworkListCachedConfig(net *NetworkConfigList, rt *RuntimeConf) ([]<span class="keyword">byte</span>, *RuntimeConf, error)</span><br><span class="line"></span><br><span class="line"><span class="comment">//以下3个最核心接口</span></span><br><span class="line">AddNetwork(ctx context.Context, net *NetworkConfig, rt *RuntimeConf) (types.Result, error)</span><br><span class="line">CheckNetwork(ctx context.Context, net *NetworkConfig, rt *RuntimeConf) error</span><br><span class="line">DelNetwork(ctx context.Context, net *NetworkConfig, rt *RuntimeConf) error</span><br><span class="line"></span><br><span class="line">GetNetworkCachedResult(net *NetworkConfig, rt *RuntimeConf) (types.Result, error)</span><br><span class="line">GetNetworkCachedConfig(net *NetworkConfig, rt *RuntimeConf) ([]<span class="keyword">byte</span>, *RuntimeConf, error)</span><br><span class="line"></span><br><span class="line">ValidateNetworkList(ctx context.Context, net *NetworkConfigList) ([]<span class="keyword">string</span>, error)</span><br><span class="line">ValidateNetwork(ctx context.Context, net *NetworkConfig) ([]<span class="keyword">string</span>, error)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> CNIConfig <span class="keyword">struct</span> &#123;</span><br><span class="line">Path     []<span class="keyword">string</span></span><br><span class="line">exec     invoke.Exec</span><br><span class="line">cacheDir <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _ CNI = &amp;CNIConfig&#123;&#125; <span class="comment">// *注意，将CNIConfig&#123;&#125;对象指针都是CNI接口的实现实例；</span></span><br></pre></td></tr></table></figure><h3 id="核心接口分析"><a href="#核心接口分析" class="headerlink" title="核心接口分析"></a>核心接口分析</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *CNIConfig)</span> <span class="title">addNetwork</span><span class="params">(ctx context.Context, name, cniVersion <span class="keyword">string</span>, net *NetworkConfig, prevResult types.Result, rt *RuntimeConf)</span> <span class="params">(types.Result, error)</span></span> &#123;</span><br><span class="line">c.ensureExec()  <span class="comment">// 添加数据平台</span></span><br><span class="line">pluginPath, err := c.exec.FindInPath(net.Network.Type, c.Path)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := utils.ValidateContainerID(rt.ContainerID); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := utils.ValidateNetworkName(name); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := utils.ValidateInterfaceName(rt.IfName); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">newConf, err := buildOneConfig(name, cniVersion, net, prevResult, rt)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> invoke.ExecPluginWithResult(ctx, pluginPath, newConf.Bytes, c.args(<span class="string">"ADD"</span>, rt), c.exec) <span class="comment">//执行了Plugin 注入os.Exec</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> RawExec <span class="keyword">struct</span> &#123;</span><br><span class="line">Stderr io.Writer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *RawExec)</span> <span class="title">ExecPlugin</span><span class="params">(ctx context.Context, pluginPath <span class="keyword">string</span>, stdinData []<span class="keyword">byte</span>, environ []<span class="keyword">string</span>)</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</span><br><span class="line">stdout := &amp;bytes.Buffer&#123;&#125;</span><br><span class="line">c := exec.CommandContext(ctx, pluginPath)</span><br><span class="line">c.Env = environ</span><br><span class="line">c.Stdin = bytes.NewBuffer(stdinData)</span><br><span class="line">c.Stdout = stdout</span><br><span class="line">c.Stderr = e.Stderr</span><br><span class="line"><span class="keyword">if</span> err := c.Run(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, pluginErr(err, stdout.Bytes())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> stdout.Bytes(), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">pluginErr</span><span class="params">(err error, output []<span class="keyword">byte</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> exitError, ok := err.(*exec.ExitError); ok &#123;</span><br><span class="line">emsg := types.Error&#123;&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(output) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(exitError.Stderr) == <span class="number">0</span> &#123;</span><br><span class="line">emsg.Msg = <span class="string">"netplugin failed with no error message"</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">emsg.Msg = fmt.Sprintf(<span class="string">"netplugin failed: %q"</span>, <span class="keyword">string</span>(exitError.Stderr))</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> perr := json.Unmarshal(output, &amp;emsg); perr != <span class="literal">nil</span> &#123;</span><br><span class="line">emsg.Msg = fmt.Sprintf(<span class="string">"netplugin failed but error parsing its diagnostic message %q: %v"</span>, <span class="keyword">string</span>(output), perr)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> &amp;emsg</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *RawExec)</span> <span class="title">FindInPath</span><span class="params">(plugin <span class="keyword">string</span>, paths []<span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">string</span>, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> FindInPath(plugin, paths)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将数据接入到Os kernel数据</p>]]></content>
    
    <summary type="html">
    
      目前K8s中使用比较多的CNI Plugin插件；简单介绍；
    
    </summary>
    
    
    
      <category term="K8S, Container Network Interface" scheme="https://dongjiang1989.github.io/tags/K8S-Container-Network-Interface/"/>
    
  </entry>
  
  <entry>
    <title>CNI (一)</title>
    <link href="https://dongjiang1989.github.io/2020/01/15/CNI/"/>
    <id>https://dongjiang1989.github.io/2020/01/15/CNI/</id>
    <published>2020-01-15T02:45:57.000Z</published>
    <updated>2020-01-19T07:01:23.740Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CNI（第一篇）"><a href="#CNI（第一篇）" class="headerlink" title="CNI（第一篇）"></a>CNI（第一篇）</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>CNI（容器网络接口）是一个规范和库，用于编写用于在Linux容器中配置网络接口的插件以及许多受支持的插件组成。</p><p>CNI包括几部分： </p><blockquote><p>golang SDK Lib, 用于集成实现网络通信接口；</p></blockquote><blockquote><p>Template，用于生成自定义的CNI插件，标准代码工程；</p></blockquote><blockquote><p>标准Document，包括社区公约、描述、roadmaps、milestone等</p></blockquote><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><h3 id="cnitool-介绍"><a href="#cnitool-介绍" class="headerlink" title="cnitool 介绍"></a>cnitool 介绍</h3><p>cnitool是将已经编译完成的的容器网络插件Adapter，添加到VM中或者PM中。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">EnvCNIPath        = <span class="string">"CNI_PATH"</span>   <span class="comment">//CNI Adapter bin文件路径（bin的编译需要去掉cgo）</span></span><br><span class="line">EnvNetDir         = <span class="string">"NETCONFPATH"</span>  <span class="comment">//部署（添加、删除、检查）adapter需要的json配置文件路径</span></span><br><span class="line">EnvCapabilityArgs = <span class="string">"CAP_ARGS"</span>  <span class="comment">// CAP 参数</span></span><br><span class="line">EnvCNIArgs        = <span class="string">"CNI_ARGS"</span>  <span class="comment">// adapter 外部传递的参数，一般不用，将args放在json文件中</span></span><br><span class="line">EnvCNIIfname      = <span class="string">"CNI_IFNAME"</span>  <span class="comment">// 设置的容器网卡名称，如eth0</span></span><br><span class="line"></span><br><span class="line">DefaultNetDir = <span class="string">"/etc/cni/net.d"</span> <span class="comment">// 默认CNI 插件路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下部分是 插件 添加方式</span></span><br><span class="line">CmdAdd   = <span class="string">"add"</span></span><br><span class="line">CmdCheck = <span class="string">"check"</span></span><br><span class="line">CmdDel   = <span class="string">"del"</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="插件使用"><a href="#插件使用" class="headerlink" title="插件使用"></a>插件使用</h3><p>准备二进制插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go get github.com/containernetworking/plugins</span><br><span class="line">go build ptp -o myptp</span><br></pre></td></tr></table></figure><p>准备网络配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> `</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"cniVersion"</span>: <span class="string">"0.4.0"</span>,</span><br><span class="line"><span class="string">"name"</span>: <span class="string">"myptp"</span>,</span><br><span class="line"><span class="string">"type"</span>: <span class="string">"ptp"</span>,  //veth pair</span><br><span class="line"><span class="string">"ipMasq"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">"ipam"</span>: &#123;</span><br><span class="line"><span class="string">"type"</span>: <span class="string">"host-local"</span>,</span><br><span class="line"><span class="string">"subnet"</span>: <span class="string">"172.16.29.0/24"</span>,</span><br><span class="line"><span class="string">"routes"</span>: [&#123;</span><br><span class="line"><span class="string">"dst"</span>: <span class="string">"0.0.0.0/0"</span></span><br><span class="line">&#125;]</span><br><span class="line">&#125;</span><br><span class="line">&#125;` &gt; /etc/cni/net.d/myptp.conflist</span><br></pre></td></tr></table></figure><p>准备好配置后部署容器网络：</p><p>第一步：创建网络Namespace， 添加名称为mytest_network</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ip netns add mytest_network</span><br></pre></td></tr></table></figure><p>第二步：添加容器网络myptp</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo CNI_PATH=/etc/cni/net.d/ cnitool add myptp /var/run/netns/mytest_network</span><br></pre></td></tr></table></figure><p>第三步：调测网络</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ip -n mytest_network addr</span><br><span class="line">sudo ip netns <span class="built_in">exec</span> mytest_network ping -c 1 4.2.2.2</span><br></pre></td></tr></table></figure><p>最后，清理网络</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo CNI_PATH=./etc/cni/net.d/ cnitool del myptp /var/run/netns/mytest_network</span><br><span class="line">sudo ip netns del mytest_network</span><br></pre></td></tr></table></figure><h3 id="cnitool调用插件"><a href="#cnitool调用插件" class="headerlink" title="cnitool调用插件"></a>cnitool调用插件</h3><p>正如上面的例子：<code>cnitool add myptp /var/run/netns/mytest_network</code></p><blockquote><p>参数0是cnitool工具名称<br>参数1是操作名称（add、del、check）<br>参数3是加载的配置对象 <code>myptp.*</code> 文件对象<br>参数4是 net namespace 名称</p></blockquote><p>解析过程：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">...</span><br><span class="line"><span class="string">"github.com/containernetworking/cni/libcni"</span>  <span class="comment">// golang lib SDK</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(os.Args) &lt; <span class="number">4</span> &#123;  <span class="comment">// 判断参数</span></span><br><span class="line">usage()</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">netdir := os.Getenv(EnvNetDir)  <span class="comment">//加载conf文件地址</span></span><br><span class="line"><span class="keyword">if</span> netdir == <span class="string">""</span> &#123;</span><br><span class="line">netdir = DefaultNetDir</span><br><span class="line">&#125;</span><br><span class="line">netconf, err := libcni.LoadConfList(netdir, os.Args[<span class="number">2</span>])</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">exit(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">... </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ifName, ok := os.LookupEnv(EnvCNIIfname) <span class="comment">// 加载网卡</span></span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line">ifName = <span class="string">"eth0"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">netns := os.Args[<span class="number">3</span>]    <span class="comment">//获得 new working namespace</span></span><br><span class="line">netns, err = filepath.Abs(netns)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">exit(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// CNI runtime object</span></span><br><span class="line">cninet := libcni.NewCNIConfig(filepath.SplitList(os.Getenv(EnvCNIPath)), <span class="literal">nil</span>)</span><br><span class="line">rt := &amp;libcni.RuntimeConf&#123;</span><br><span class="line">ContainerID:    fmt.Sprintf(<span class="string">"cnitool-%x"</span>, ha512.Sum512([]<span class="keyword">byte</span>(netns))[:<span class="number">10</span>]),</span><br><span class="line">NetNS:          netns,</span><br><span class="line">IfName:         ifName,</span><br><span class="line">Args:           cniArgs,</span><br><span class="line">CapabilityArgs: capabilityArgs,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// CNI 具体执行方式</span></span><br><span class="line"><span class="keyword">switch</span> os.Args[<span class="number">1</span>] &#123;</span><br><span class="line"><span class="keyword">case</span> CmdAdd:</span><br><span class="line">result, err := cninet.AddNetworkList(context.TODO(), netconf, rt)</span><br><span class="line"><span class="keyword">if</span> result != <span class="literal">nil</span> &#123;</span><br><span class="line">_ = result.Print()</span><br><span class="line">&#125;</span><br><span class="line">exit(err)</span><br><span class="line"><span class="keyword">case</span> CmdCheck:</span><br><span class="line">err := cninet.CheckNetworkList(context.TODO(), netconf, rt)</span><br><span class="line">exit(err)</span><br><span class="line"><span class="keyword">case</span> CmdDel:</span><br><span class="line">exit(cninet.DelNetworkList(context.TODO(), netconf, rt))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Golang-libcni-SDK"><a href="#Golang-libcni-SDK" class="headerlink" title="Golang libcni SDK"></a>Golang libcni SDK</h2><p>SDK核心的interface 接口定义：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>(</span><br><span class="line"><span class="string">"github.com/containernetworking/cni/pkg/invoke"</span> <span class="comment">//syscall 具体调用</span></span><br><span class="line"><span class="string">"github.com/containernetworking/cni/pkg/types"</span> <span class="comment">// 网络adapter管理，使用Plugin Chains模型进行关联</span></span><br><span class="line"><span class="string">"github.com/containernetworking/cni/pkg/utils"</span> <span class="comment">// 公共方法：cni conf file中各个字段ValidCheck</span></span><br><span class="line"><span class="string">"github.com/containernetworking/cni/pkg/version"</span> <span class="comment">// version compare相关: 0.2.x以下版本兼容；0.3.x 和 现在的0.4.x 版本兼容</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">type</span> CNI <span class="keyword">interface</span> &#123;</span><br><span class="line">AddNetworkList(ctx context.Context, net *NetworkConfigList, rt *RuntimeConf) (types.Result, error)</span><br><span class="line">CheckNetworkList(ctx context.Context, net *NetworkConfigList, rt *RuntimeConf) error</span><br><span class="line">DelNetworkList(ctx context.Context, net *NetworkConfigList, rt *RuntimeConf) error</span><br><span class="line">GetNetworkListCachedResult(net *NetworkConfigList, rt *RuntimeConf) (types.Result, error)</span><br><span class="line">GetNetworkListCachedConfig(net *NetworkConfigList, rt *RuntimeConf) ([]<span class="keyword">byte</span>, *RuntimeConf, error)</span><br><span class="line"></span><br><span class="line"><span class="comment">//以下3个最核心接口</span></span><br><span class="line">AddNetwork(ctx context.Context, net *NetworkConfig, rt *RuntimeConf) (types.Result, error)</span><br><span class="line">CheckNetwork(ctx context.Context, net *NetworkConfig, rt *RuntimeConf) error</span><br><span class="line">DelNetwork(ctx context.Context, net *NetworkConfig, rt *RuntimeConf) error</span><br><span class="line"></span><br><span class="line">GetNetworkCachedResult(net *NetworkConfig, rt *RuntimeConf) (types.Result, error)</span><br><span class="line">GetNetworkCachedConfig(net *NetworkConfig, rt *RuntimeConf) ([]<span class="keyword">byte</span>, *RuntimeConf, error)</span><br><span class="line"></span><br><span class="line">ValidateNetworkList(ctx context.Context, net *NetworkConfigList) ([]<span class="keyword">string</span>, error)</span><br><span class="line">ValidateNetwork(ctx context.Context, net *NetworkConfig) ([]<span class="keyword">string</span>, error)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> CNIConfig <span class="keyword">struct</span> &#123;</span><br><span class="line">Path     []<span class="keyword">string</span></span><br><span class="line">exec     invoke.Exec</span><br><span class="line">cacheDir <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _ CNI = &amp;CNIConfig&#123;&#125; <span class="comment">// *注意，将CNIConfig&#123;&#125;对象指针都是CNI接口的实现实例；</span></span><br></pre></td></tr></table></figure><h3 id="核心接口分析"><a href="#核心接口分析" class="headerlink" title="核心接口分析"></a>核心接口分析</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *CNIConfig)</span> <span class="title">addNetwork</span><span class="params">(ctx context.Context, name, cniVersion <span class="keyword">string</span>, net *NetworkConfig, prevResult types.Result, rt *RuntimeConf)</span> <span class="params">(types.Result, error)</span></span> &#123;</span><br><span class="line">c.ensureExec()  <span class="comment">// 添加数据平台</span></span><br><span class="line">pluginPath, err := c.exec.FindInPath(net.Network.Type, c.Path)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := utils.ValidateContainerID(rt.ContainerID); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := utils.ValidateNetworkName(name); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := utils.ValidateInterfaceName(rt.IfName); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">newConf, err := buildOneConfig(name, cniVersion, net, prevResult, rt)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> invoke.ExecPluginWithResult(ctx, pluginPath, newConf.Bytes, c.args(<span class="string">"ADD"</span>, rt), c.exec) <span class="comment">//执行了Plugin 注入os.Exec</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> RawExec <span class="keyword">struct</span> &#123;</span><br><span class="line">Stderr io.Writer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *RawExec)</span> <span class="title">ExecPlugin</span><span class="params">(ctx context.Context, pluginPath <span class="keyword">string</span>, stdinData []<span class="keyword">byte</span>, environ []<span class="keyword">string</span>)</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</span><br><span class="line">stdout := &amp;bytes.Buffer&#123;&#125;</span><br><span class="line">c := exec.CommandContext(ctx, pluginPath)</span><br><span class="line">c.Env = environ</span><br><span class="line">c.Stdin = bytes.NewBuffer(stdinData)</span><br><span class="line">c.Stdout = stdout</span><br><span class="line">c.Stderr = e.Stderr</span><br><span class="line"><span class="keyword">if</span> err := c.Run(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, pluginErr(err, stdout.Bytes())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> stdout.Bytes(), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">pluginErr</span><span class="params">(err error, output []<span class="keyword">byte</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> exitError, ok := err.(*exec.ExitError); ok &#123;</span><br><span class="line">emsg := types.Error&#123;&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(output) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(exitError.Stderr) == <span class="number">0</span> &#123;</span><br><span class="line">emsg.Msg = <span class="string">"netplugin failed with no error message"</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">emsg.Msg = fmt.Sprintf(<span class="string">"netplugin failed: %q"</span>, <span class="keyword">string</span>(exitError.Stderr))</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> perr := json.Unmarshal(output, &amp;emsg); perr != <span class="literal">nil</span> &#123;</span><br><span class="line">emsg.Msg = fmt.Sprintf(<span class="string">"netplugin failed but error parsing its diagnostic message %q: %v"</span>, <span class="keyword">string</span>(output), perr)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> &amp;emsg</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *RawExec)</span> <span class="title">FindInPath</span><span class="params">(plugin <span class="keyword">string</span>, paths []<span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">string</span>, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> FindInPath(plugin, paths)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将数据接入到Os kernel数据</p>]]></content>
    
    <summary type="html">
    
      Container Network Interface - networking for Linux containers
    
    </summary>
    
    
    
      <category term="K8S, Container Network Interface" scheme="https://dongjiang1989.github.io/tags/K8S-Container-Network-Interface/"/>
    
  </entry>
  
  <entry>
    <title>Blog背景介绍</title>
    <link href="https://dongjiang1989.github.io/2020/01/14/common/"/>
    <id>https://dongjiang1989.github.io/2020/01/14/common/</id>
    <published>2020-01-14T02:00:18.000Z</published>
    <updated>2020-01-20T04:42:03.369Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Blog"><a href="#Blog" class="headerlink" title="Blog"></a>Blog</h1><p>由于之前单独保密协议 和 公司网络问题，禁止分析工作经验到外网（获得内部审批的Qcon 和 kubeCon除外），真处于换工作的间隙，我这几年的工作上、生活上的东西积累下来，怕自己年纪大了，忘性越来越大！ 哈哈！</p><h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><p>本Blog先介绍K8s相关组件、包括：K8s master各个组件、CNI、CSI、CRI等；再介绍Docker engine，包括底层的runc和runv等</p><p>再介绍上层应用： service mesh和knaitve 以及 serverless 社区发展；</p><p>再穿插着来介绍Cloud Native的 Monitor、Tracing、Logging 和 Chaos Engines；</p><h2 id="工作经历"><a href="#工作经历" class="headerlink" title="工作经历"></a>工作经历</h2><p>2010.10 - 2013.7 在百度大搜，主要从事开发测试和全栈研发工作。参与过百度乔梁总Smart CI/CD、百度360搜索大战、架构改造（组件化改造）BASA项目、以及百度大搜产品变化比较大的阿拉丁项目（百度侧边栏阿拉丁效果）</p><p>2013.8 - 2015.9 在阿里妈妈，主要从事基础研发，部署平台、内部应用市场、ODPS PHP Client、搜索引擎（btree+ 和 jstorm数据写入）； 也包括DSP业务功能研发； 阿里妈妈虽然是阿里奶牛，但是技术上还是比较基础的；和淘宝、搜索等技术能力还比不上。</p><p>2015.9 - 2017.8 在滴滴，主要是从事工具平台： 主要包括：调查问卷系统、Crash&amp;ANR系统、网络数据收集监控、IOS sdk等等</p><p>2017.8 - 2020.1 在华为云，主要从事云服务的研发（CDN、RTC、媒体云服务），基础PaaS服务、Service mesh（istio、envoy、sofamosn等）、KNative等，已经CNCF组件； 参与开源社区；</p><h2 id="工作体验"><a href="#工作体验" class="headerlink" title="工作体验"></a>工作体验</h2><p>我最感谢的是百度。在百度是一个最适合培养新人地方，从个人能力提升，对于中大型公司执行流程和管理流程。本身百度业务比较简单（业务简单，不是技术简单），可以更好的端到端了解正研发管理流程；</p><p>在阿里，是最考虑合作共赢的产品，只要你刚兴趣可以接触到各种产品、技术。可以从产品角度，来思考技术；</p><p>在滴滴，滴滴本身不是技术公司，是产品需求产生的公司，业务快速膨胀，推进技术的快速革新。我在其中体验到了端测技术（iOS相关）；</p><p>在华为云，体验到了管理的『艺术』，人性的底线；</p><h2 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h2><p>喜欢coding； 不擅长ppt； 喜欢： 代码架构 &gt; 功能架构 &gt; 远景视图；</p>]]></content>
    
    <summary type="html">
    
      背景介绍； 分享最近几年的工作经验和心得；
    
    </summary>
    
    
    
  </entry>
  
</feed>
